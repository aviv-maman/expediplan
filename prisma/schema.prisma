// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                        String    @id @default(cuid())
  userId                    String    @map("user_id")
  type                      String
  provider                  String
  providerAccountId         String    @map("provider_account_id")
  refresh_token             String?   @db.VarChar(500)
  access_token              String?   @db.VarChar(500)
  refresh_token_expires_in  Int?
  expires_at                Int?
  token_type                String?
  scope                     String?
  id_token                  String?
  session_state             String?
  oauth_token_secret        String?
  oauth_token               String?
  createdAt                 DateTime  @default(now()) @map(name: "created_at")
  updatedAt                 DateTime  @default(now()) @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  role          String?   @default("user")
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @default(now()) @map(name: "updated_at")
  Plan          Plan[]
}

model VerificationToken {
  id         Int       @id @default(autoincrement())
  identifier String
  token      String    @unique
  expires    DateTime
  createdAt  DateTime  @default(now()) @map(name: "created_at")
  updatedAt  DateTime  @default(now()) @map(name: "updated_at")

  @@unique([identifier, token])
}

model Plan {
  id          Int      @id @default(autoincrement())
  name        String   
  country     Int
  city        Int
  startDate   DateTime @map("start_date")
  endDate     DateTime @map("end_date")
  countryName String   @unique @map("country_name")
  cityName    String   @map("city_name")
  days        Day[]
  duration    Int
  createdAt   DateTime @default(now()) @map(name: "created_at")
  updatedAt   DateTime @default(now()) @map(name: "updated_at")
  published   Boolean  @default(false)
  author      User     @relation(fields: [authorId], references: [id])
  authorId    String
}

model Day {
  id        Int        @id @default(autoincrement())
  index     Int
  date      DateTime
  interests Interest[]
  Plan      Plan?      @relation(fields: [planId], references: [id])
  planId    Int?       @map("plan_id")
}

model Interest {
  id        Int      @id @default(autoincrement())
  startTime DateTime @map("start_time")
  endTime   DateTime @map("end_time")
  Day       Day?     @relation(fields: [dayId], references: [id])
  dayId     Int?     @map("day_id")
}
